<% include partials/head %>
<% include partials/header_cours %>
<br>
<div class="container">
    <button class="btn">
        <span class="oi oi-chevron-left"></span>
        Cours précédent
    </button>
    <button class="btn float-right">
        Cours suivant
        <span class="oi oi-chevron-right space-left"></span>
    </button>
    <br>
    <br>
    <p>Introduction</p>
    <p>Reprendre la mise en contexte.</p>
    <p>Le but de cette première unité est de présenter les failles les plus connues ainsi que l’exploitation qui peut en être faite. Nous aborderons les failles classiques que tout développeur connaît : failles SQL et XSS. Mais aussi des failles plus sournoises et moins connues du grand public comme les failles XXE.</p>
    <p>La faille XSS :</p>
    <p>La faille de Cross Site Scripting est une faille qui permet d’injecter du code HTML, CSS ou JavaScript dans des formulaires.</p>
    <p>Il existe deux type de XSS :</p>
    <p>Le XSS réfléchi qui est non permanent.</p>
    <p>Le XSS stocké qui lui est permanent.</p>
    <p>XSS Réfléchi</p>

    <p>Cette faille est la plus courante et la plus simple à exploiter.
        <br> <br>
        Heureusement comme nous le verrons, il est très facile de s’en prémunir.
        <br> <br>Très peu de sites aujourd’hui présentent des failles XSS de type réfléchi car la plupart des frameworks bloquent ces failles.
        <br> <br>On l’appelle non permanente car elle n’est pas stockée en base de données ou dans un fichier, elle est donc éphémère.
        <br> <br>
    Cette faille exploite le fait que l’application Web affiche ce que l’utilisateur vient de saisir dans un formulaire dans une page de résultat.
        <br> <br>Le navigateur exécute alors le code frauduleux généré dans la page de résultats.
        <br> <br>
    Voici un exemple très classique, imaginez un site de e-commerce qui présente une barre de recherche pour rechercher un produit particulier.
        <br> <br>Lorsqu’un utilisateur utilise cette barre, l’intitulé de la recherche est affiché sur la page des résultats.
        <br> <br>
    Ainsi si la page est vulnérable aux attaques XSS, le code s’exécutera et s’affichera dans le navigateur de l’utilisateur.
        <br> <br>Pour illustrer la faille, j’ai créé une page URL vulnérable aux failles XSS qui simule une barre de recherche.
        <br> <br>Si un utilisateur s’amuse à taper la commande suivante dans la barre de recherche :
    </p>

    <br>
    <div class="row">
        <div class="col-sm-4">
            <button class="btn">
                <span class="oi oi-chevron-left"></span>
                Cours précédent
            </button>
        </div>
        <div class="col-sm-4 text-center">
            <button class="btn">
                <span class="oi oi-check"></span>
                J'ai lu ce cours
            </button>
        </div>
        <div class="col-sm-4">
            <button class="btn float-right">
                Cours suivant
                <span class="oi oi-chevron-right space-left"></span>
            </button>
        </div>
    </div>
</div>
<% include partials/footer %>